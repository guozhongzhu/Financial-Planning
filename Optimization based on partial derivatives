module test_valuefunc
  implicit none
  integer, parameter :: singlep = kind(1.0), doublep = kind(1.0d0)
  integer, parameter :: fp = doublep
  real(fp) :: rb=1.02, ralo=0.9, rahi=1.22
  real(fp) :: Plo=0.5, phi=0.50
  real(fp),parameter :: beta=0.96, gamma=2.00, theta=0.5
  real(fp),parameter :: theta11=1-1/theta
  integer, parameter :: nA=300,  nB=300
  real(fp), parameter :: Amin=0.0, Amax=20.0, Bmin=0.0,  Bmax=20.0
  real(fp), parameter :: entrycost=0.01, adjcost=0.0
  real(fp) :: assetA(nA), assetB(nB), bondnow,stocknow,income
  real(fp) :: alpha0, alpha1
  real(fp) :: beta0, beta1

 
contains
  function Evalue(bondfuture,stockfuture)  !expected value
    implicit none
    real(fp), intent(in) :: bondfuture, stockfuture
    real(fp) :: Vfunc(nB,nA),incomeT,consumpt
    real(fp) :: valuelo,valuehi,Evalue
    integer  :: j,i
    incomeT=1.0
    do j=1,nB
       do i=1,nA
          consumpt=incomeT+assetB(j)+assetA(i)
          Vfunc(j,i)=consumpt**(1.0-gamma)/(1.0-gamma)
       enddo
    enddo
    call interp2D(bondfuture*rb,stockfuture*ralo,valuelo,&
         assetB,AssetA,Vfunc(:,:),nB,nA)    
    call interp2D(bondfuture*rb,stockfuture*rahi,valuehi,&
         assetB,AssetA,Vfunc(:,:),nB,nA)    
    Evalue = plo*valuelo + phi*valuehi   !expected value
  end function Evalue

  function ERvalue(bondfuture,stockfuture)  ! E( Ra*v(Rb*b,Ra*a)  )
    implicit none
    real(fp), intent(in) :: bondfuture, stockfuture
    real(fp) :: Vfunc(nB,nA),incomeT,consumpt
    real(fp) :: valuelo,valuehi,ERvalue
    integer  :: j,i
    incomeT=1.0
    do j=1,nB
       do i=1,nA
          consumpt=incomeT+assetB(j)+assetA(i)
          Vfunc(j,i)=consumpt**(1.0-gamma)/(1.0-gamma)
       enddo
    enddo
    call interp2D(bondfuture*rb,stockfuture*ralo,valuelo,&
         assetB,AssetA,Vfunc(:,:),nB,nA)    
    call interp2D(bondfuture*rb,stockfuture*rahi,valuehi,&
         assetB,AssetA,Vfunc(:,:),nB,nA)    
    ERvalue = plo*ralo*valuelo + phi*rahi*valuehi   !expected value
  end function ERvalue

  function valuefunc(bondfuture,stockfuture)
    implicit none
    real(fp),intent(in) :: bondfuture,stockfuture
    real(fp):: valuefunc,consumpt
    consumpt = income+bondnow+stocknow-bondfuture-stockfuture-adjcost
    if (consumpt.le.0) then
       valuefunc=-1e20
    else
       valuefunc = consumpt**(1.0-gamma)/(1.00-gamma)+beta*Evalue(bondfuture,stockfuture)
    endif  
  end function valuefunc


  subroutine FOCsearch(startpt,newpt,it,itmax,tol,newval)
    implicit none
 ! search for optimal point based on first-order condition
 ! startpt should be interior in the stock-bond space   
    real(fp):: startpt(2),newpt(2), newval
    integer::  it, itmax,ib,ia
    real(fp):: consumpt, bond,stock,marginU,tol
    real(fp):: partb,parta  !partial derivatives
    real(fp):: blo,bhi,alo,ahi,v1,v2,v3,v4

    bond = startpt(1)
    stock = startpt(2)
    consumpt = income+bondnow+stocknow-bond-stock-adjcost
    if (consumpt<0.001) then
       newpt(1)=startpt(1)-0.05*abs(startpt(1))
       newpt(2)=startpt(2)-0.05*abs(startpt(2))
       newval = -99000000000
       return
    else
       ib = floor(1.0/beta1*log(beta0+bond))
       ia = floor(1.0/alpha1*log(alpha0+stock))
       if (ib.le.1.and.ia.le.1) then
          consumpt=income+bondnow+stocknow-adjcost-Bmin-Amin
          newval = consumpt**(1.0-gamma)/(1.0-gamma)+beta*Evalue(Bmin,Amin)
          it = itmax
          newpt(1)=Bmin
          newpt(2)=Amin
       elseif (ib.ge.nB.and.ia.ge.nA) then
          newval = consumpt**(1.0-gamma)/(1.0-gamma)+beta*Evalue(Bmax,Amax)
          it = itmax
          newpt(1)=Bmax
          newpt(2)=Amax
       elseif (ib.le.1.and.ia.ge.nA) then
          consumpt=income+bondnow+stocknow-adjcost-Bmin-stock
          newval = consumpt**(1.0-gamma)/(1.0-gamma)+beta*Evalue(Bmin,Amax)
          it = itmax
          newpt(1)=Bmin
          newpt(2)=Amax
       elseif (ib.ge.nB.and.ia.le.nA) then
          consumpt=income+bondnow+stocknow-adjcost-bond-Amin
          newval = consumpt**(1.0-gamma)/(1.0-gamma)+beta*Evalue(Bmax,Amin)
          it = itmax
          newpt(1)=Bmax
          newpt(2)=Amin
       else 
          newval = consumpt**(1.0-gamma)/(1.0-gamma)+beta*&
               ( 0.5*(income+bond*rb+stock*ralo)**(1.0-gamma)/(1.0-gamma) &
                +0.5*(income+bond*rb+stock*rahi)**(1.0-gamma)/(1.0-gamma)   )
          if (ib.le.1) then
             ib=1; bond=Bmin
          endif
          if (ib.ge.nB) then
             ib=nB-1; bond=Bmax
          endif
          if (ia.le.1) then
             ia=1; stock=Amin
          endif
          if (ia.ge.nA) then
             ia=nA-1; stock=Amax
          endif
          blo = assetB(ib)
          bhi = assetb(ib+1)
          alo = assetA(ia)
          ahi = assetA(ia+1)
          v1 = ERvalue(bond,alo)
          v2 = ERvalue(bond,ahi)
          if (v2.le.v1) then
             if (ia+1<nA) then
                ahi=assetA(ia+2)
                v2 = ERvalue(bond,ahi)
             else
                alo=assetA(ia-1)
                v1 = ERvalue(bond,alo)
             endif
          endif
          parta = beta*(v2-v1)/(ahi-alo)

          v3 = Evalue(blo,stock)
          v4 = Evalue(bhi,stock)
          if (v4.le.v3) then
             if (ib+1<nB) then
                bhi=assetB(ib+2)
                v4=Evalue(bhi,stock)
             else 
                blo=assetB(ib-1)
                v3 = Evalue(blo,stock)
             endif
          endif
          partb=beta*Rb*(v4-v3)/(bhi-blo)


!          partb1=beta*0.5*Rb*(income+Rb*bond+Ralo*stock)**(-gamma) + &
!               beta*0.5*Rb*(income+Rb*bond+Rahi*stock)**(1-gamma)
!          parta1=beta*0.5*Ralo*(income+Rb*bond+Ralo*stock)**(-gamma) + &
!               beta*0.5*Rahi*(income+Rb*bond+Rahi*stock)**(1-gamma)
          

          marginU = consumpt**(-gamma)
          ! update
          if (stock.le.Amin.or.stock.ge.Amax) then
             newpt(1)=bond+partb-marginU
          elseif (bond.le.Bmin.or.bond.ge.Bmax) then
             newpt(2)=stock+parta-marginU
          else
             if (parta>partb.and.parta>marginU) then
                newpt(1)=bond*0.95
                newpt(2)=stock*1.05
             elseif (partb>parta.and.partb>marginU) then
                newpt(1)=bond*1.05
                newpt(2)=stock*0.95
             else
                newpt(1)=bond*0.95
                newpt(2)=stock*0.95
             endif
          endif

          if (abs(parta-marginU)+abs(partb-marginU)<tol) then
             newpt=(/bond,stock/)
             it=itmax
          endif
       endif
       
!       print*,'                          '
!       print*,'************** marginU, partials and value :'
!       write(*,'(10f12.6)') (/marginU,partb,parta,newval/)
!       print*,'**************marginU, theoretical partials'
!       write(*,'(10f12.6)') (/marginU,partb1,parta1/)
!       print*,'oldpt=',startpt
!       print*,'newpt=',newpt
    endif

    return
  end subroutine FOCsearch




  subroutine set_grid(gmin, gmax, ng, grid, alpha0, alpha1)
    implicit none
    real(fp), intent(in) :: gmin, gmax
    integer, intent(in) :: ng
    real(fp), intent(out):: alpha0, alpha1, grid(ng)
    integer:: i
    alpha1 = (log(gmax - gmin + 1.0))/ng;
    alpha0 = exp(alpha1) - gmin;
    do i = 1, ng
       grid(i) = -alpha0 + exp(alpha1*i);
    end do
    grid(1) = gmin;
    grid(ng) = gmax;
    return
  end subroutine set_grid


  
  subroutine interp2D(xinp0, yinp0,zinp, xgrid, ygrid,zfunc, nx,ny)
    implicit none
    !*************************************************************************************
    ! Piecewise liner interpolation.
    ! Given input arrays xgrid,ygrid (independent variable) and zfunc (dependent variable),
    ! both of dimension narray, this routine finds, by linear interpolation, 
    ! the value of zinp(x=xinp,y=yinp). 
    ! Array xgrid and ygrid  must be in ascending order.
    !***************************************************************************************
    real(fp), intent(out) :: zinp
    real(fp), intent(in) :: xinp0,yinp0
    integer, intent(in) :: nx,ny
    real(fp), intent(in) :: xgrid(nx)
    real(fp), intent(in) :: ygrid(ny)
    real(fp), intent(in) :: zfunc(nx,ny)
    real(fp) :: value_on_grid(4), wgt(4), area,xinp,yinp
    integer :: i,idx,idy

    idx = floor(1.0/beta1*log(beta0+xinp0))
    idy = floor(1.0/alpha1*log(alpha0+yinp0))
    if (idx<1) then
       xinp=xgrid(1); idx=1
    elseif (idx.ge.nx) then
       xinp=xgrid(nx); idx=nx-1
    else
       xinp=xinp0
    endif
    if (idy<1) then
       yinp=ygrid(1);  idy=1
    elseif (idy.ge.ny) then
       yinp=ygrid(ny); idy=ny-1
    else
       yinp=yinp0
    endif
    area = (xgrid(idx+1)-xgrid(idx))*(ygrid(idy+1)-ygrid(idy))
    value_on_grid(1) = zfunc(idx,idy)   
    value_on_grid(2) = zfunc(idx,idy+1) 
    value_on_grid(3) = zfunc(idx+1,idy) 
    value_on_grid(4) = zfunc(idx+1,idy+1)
    wgt(1) = (xgrid(idx+1)-xinp)*(ygrid(idy+1)-yinp)/area
    wgt(2) = (xgrid(idx+1)-xinp)*(yinp-ygrid(idy))/area
    wgt(3) = (xinp-xgrid(idx))*(ygrid(idy+1)-yinp)/area
    wgt(4) = (xinp-xgrid(idx))*(yinp-ygrid(idy))/area
    zinp = wgt(1)*value_on_grid(1) + wgt(2)*value_on_grid(2) &   
         + wgt(3)*value_on_grid(3) + wgt(4)*value_on_grid(4)
    return
  end subroutine interp2D

end module test_valuefunc


program main
  use test_valuefunc
  real(fp) :: bondfuture, stockfuture
  real(fp) :: valuearray(nB,nA),newval
  real(fp) :: startpt(2),newpt(2),tol
  integer  :: i, j, it,itmax,location(2)
  real(fp) :: start_time, stop_time
  call cpu_time(start_time)

! set up grids
  call set_grid(Amin, Amax, nA, assetA, alpha0, alpha1)
  call set_grid(Bmin, Bmax, nB, assetB, beta0, beta1)

! bondholding now (between Bmin=0 and Bmax=20)
  bondnow = 5.0
! stockholding now (between Amin=0 and Amax=20)
  stocknow = 5.0
  
  income=1.0        
  tol=0.0001

! choose bondfuture and stockfuture to maximize:
!      value = u(consump)+beta*v(bondfuture,stockfuture)

  
!   do j=1,nB
!      do i=1,nA
!         bondfuture=assetB(j);
!         stockfuture=assetA(i)
!         valuearray(j,i)=valuefunc(bondfuture,stockfuture)
!      enddo
!   enddo
! !  print*,'bond now=',bondnow,';    stocknow=',stocknow
!   print*,'***********maximum value = ', maxval(valuearray)  
!   location=maxloc(valuearray)
!   j=location(1)
!   i=location(2)
!   print*,'asset =',(/assetB(j),assetA(i)/)
  

    startpt(1) = 10.0 !bondnow!assetB(j)
    startpt(2) = 10.0 !stocknow!assetA(i)
    it=1; itmax=500
    do while (it<itmax) 
       call FOCsearch(startpt,newpt,it,itmax,tol,newval)
       startpt=newpt
       it=it+1
    enddo

    print*,'*** it=',it,'  newval=',newval
    print*,'newpt=',newpt

        
 call cpu_time(stop_time)
 write(*,*) 'elapse time=', stop_time - start_time
 stop

end program main
